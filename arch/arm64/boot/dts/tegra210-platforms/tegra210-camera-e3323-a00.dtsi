/*
 * Copyright (c) 2015-2016, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

/ {
	host1x {
		vi {
			num-channels = <4>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					reg = <0>;
					e3323_vi_in0: endpoint {
						csi-port = <0>;
						bus-width = <4>;
						remote-endpoint = <&ov23850_out0>;
					};
				};
				port@1 {
					reg = <1>;
					e3323_vi_in1: endpoint {
						csi-port = <2>;
						bus-width = <4>;
						remote-endpoint = <&ov23850_out1>;
					};
				};
				port@2 {
					reg = <2>;
					e3323_vi_in2: endpoint {
						remote-endpoint = <&lc898212_out0>;
					};
				};
				port@3 {
					reg = <3>;
					e3323_vi_in3: endpoint {
						remote-endpoint = <&lc898212_out1>;
					};
				};
			};
		};

		i2c@546c0000 {
			ov23850_a@10 {
				compatible = "nvidia,ov23850";

				reg = <0x10>;
				/* Physical dimensions of sensor */
				physical_w = "7.3998";
				physical_h = "5.5998";

				/* Sensor Model */
				sensor_model ="ov23850";

				/* Define any required hw resources needed by driver */
				/* ie. clocks, io pins, power sources */
				avdd-reg = "vana";
				dvdd-reg = "vdig";
				iovdd-reg = "vif";
				vcmvdd-reg = "vvcm";
				devnode = "video0";

				/* Defines number of frames to be dropped by driver internally after applying */
				/* sensor crop settings. Some sensors send corrupt frames after applying */
				/* crop co-ordinates */
				post_crop_frame_drop = "0";

				/**
				* A modeX node is required to support v4l2 driver
				* implementation with NVIDIA camera software stack
				*
				* mclk_khz = "";
				* Standard MIPI driving clock, typically 24MHz
				*
				* num_lanes = "";
				* Number of lane channels sensor is programmed to output
				*
				* tegra_sinterface = "";
				* The base tegra serial interface lanes are connected to
				*
				* discontinuous_clk = "";
				* The sensor is programmed to use a discontinuous clock on MIPI lanes
				*
				* dpcm_enable = "true";
				* The sensor is programmed to use a DPCM modes
				*
				* cil_settletime = "";
				* MIPI lane settle time value.
				* A "0" value attempts to autocalibrate based on mclk_multiplier
				*
				*
				*
				*
				* active_w = "";
				* Pixel active region width
				*
				* active_h = "";
				* Pixel active region height
				*
				* pixel_t = "";
				* The sensor readout pixel pattern
				* For eg - 10 bit bayer having 'bggr' pixel pattern has value "bayer_bggr"
				*          12 bit bayer having 'bggr' pixel pattern has value "bayer_bggr12"
				*          14 bit bayer having 'bggr' pixel pattern has value "bayer_bggr14"
				*
				* readout_orientation = "0";
				* Based on camera module orientation.
				* Only change readout_orientation if you specifically
				* Program a different readout order for this mode
				*
				* line_length = "";
				* Pixel line length (width) for sensor mode.
				* This is used to calibrate features in our camera stack.
				*
				* mclk_multiplier = "";
				* Multiplier to MCLK to help time hardware capture sequence
				* TODO: Assign to PLL_Multiplier as well until fixed in core
				*
				* pix_clk_hz = "";
				* Sensor pixel clock used for calculations like exposure and framerate
				*
				*
				*
				*
				* inherent_gain = "";
				* Gain obtained inherently from mode (ie. pixel binning)
				*
				* min_gain_val = ""; (floor to 6 decimal places)
				* max_gain_val = ""; (floor to 6 decimal places)
				* Gain limits for mode
				*
				* min_exp_time = ""; (ceil to integer)
				* max_exp_time = ""; (ceil to integer)
				* Exposure Time limits for mode (us)
				*
				*
				* min_hdr_ratio = "";
				* max_hdr_ratio = "";
				* HDR Ratio limits for mode
				*
				* min_framerate = "";
				* max_framerate = "";
				* Framerate limits for mode (fps)
				*
				* embedded_metadata_height = "";
				* Sensor embedded metadata height in units of rows.
				* If sensor does not support embedded metadata value should be 0.
				*/

				mode0 { // OV23850_MODE_5632X4224
					mclk_khz = "24000";
					num_lanes = "4";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "5632";
					active_h = "4224";
					pixel_t = "bayer_bggr";
					readout_orientation = "270";
					line_length = "7200";
					inherent_gain = "1";
					mclk_multiplier = "31.25";
					pix_clk_hz = "750000000";

					min_gain_val = "1.0";
					max_gain_val = "15.5";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "3.179011";
					max_framerate = "21";
					min_exp_time = "20";
					max_exp_time = "314256";
					embedded_metadata_height = "0";
				};

				mode1 { // OV23850_MODE_5632X3168
					mclk_khz = "24000";
					num_lanes = "4";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "5632";
					active_h = "3168";
					pixel_t = "bayer_bggr";
					readout_orientation = "270";
					line_length = "7108";
					inherent_gain = "1";
					mclk_multiplier = "31.25";
					pix_clk_hz = "750000000";

					min_gain_val = "1.0";
					max_gain_val = "15.5";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "3.220157";
					max_framerate = "30";
					min_exp_time = "19";
					max_exp_time = "310241";
					embedded_metadata_height = "0";
				};
				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						ov23850_out0: endpoint {
							csi-port = <0>;
							bus-width = <4>;
							remote-endpoint = <&e3323_vi_in0>;
						};
					};
				};
			};
			lc898212@72 {
				compatible = "nvidia,lc898212";
				reg = <0x72>;

				/* physical camera layer interface tags */
				devnode = "video2";
				/**
				* Type specifies the control features supported by
				* the focuser driver.
				* default type means only position control setting
				* supported by the focuser
				*/
				type = "default";
				min_focus_distance = "10.0"; /* 1.0f/0.1f */
				hyper_focal = "0.2"; /* 1.0f/5.0f */
				focal_length = "4.73";
				f_number = "2.2";
				aperture = "2.2";
				support_mfi = "true";

				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						lc898212_out0: endpoint {
							remote-endpoint = <&e3323_vi_in2>;
						};
					};
				};
			};
		};
	};

	i2c@7000c000 {
		ov23850_c@36 {
			compatible = "nvidia,ov23850";

			reg = <0x36>;
			/* Physical dimensions of sensor */
			physical_w = "7.3998";
			physical_h = "5.5998";

			/* Sensor Model */
			sensor_model ="ov23850";

			/* Define any required hw resources needed by driver */
			/* ie. clocks, io pins, power sources */
			avdd-reg = "vana";
			dvdd-reg = "vdig";
			iovdd-reg = "vif";
			vcmvdd-reg = "vvcm";
			devnode = "video1";

			/* Defines number of frames to be dropped by driver internally after applying */
			/* sensor crop settings. Some sensors send corrupt frames after applying */
			/* crop co-ordinates */
			post_crop_frame_drop = "0";

			mode0 { // OV23850_MODE_5632X4224
				mclk_khz = "24000";
				num_lanes = "4";
				tegra_sinterface = "serial_c";
				discontinuous_clk = "no";
				dpcm_enable = "false";
				cil_settletime = "0";

				active_w = "5632";
				active_h = "4224";
				pixel_t = "bayer_bggr";
				readout_orientation = "270";
				line_length = "7200";
				inherent_gain = "1";
				mclk_multiplier = "31.25";
				pix_clk_hz = "750000000";

				min_gain_val = "1.0";
				max_gain_val = "15.5";
				min_hdr_ratio = "1";
				max_hdr_ratio = "64";
				min_framerate = "3.179011";
				max_framerate = "20";
				min_exp_time = "20";
				max_exp_time = "314256";
				embedded_metadata_height = "0";
			};

			mode1 { // OV23850_MODE_5632X3168
				mclk_khz = "24000";
				num_lanes = "4";
				tegra_sinterface = "serial_c";
				discontinuous_clk = "no";
				dpcm_enable = "false";
				cil_settletime = "0";

				active_w = "5632";
				active_h = "3168";
				pixel_t = "bayer_bggr";
				readout_orientation = "270";
				line_length = "7108";
				inherent_gain = "1";
				mclk_multiplier = "31.25";
				pix_clk_hz = "750000000";

				min_gain_val = "1.0";
				max_gain_val = "15.5";
				min_hdr_ratio = "1";
				max_hdr_ratio = "64";
				min_framerate = "3.220157";
				max_framerate = "30";
				min_exp_time = "19";
				max_exp_time = "310467";
				embedded_metadata_height = "0";
			};
			ports {
				#address-cells = <1>;
				#size-cells = <0>;

				port@0 {
					reg = <0>;
					ov23850_out1: endpoint {
						csi-port = <2>;
						bus-width = <4>;
						remote-endpoint = <&e3323_vi_in1>;
					};
				};
			};
		};
		lc898212@72 {
			compatible = "nvidia,lc898212";
			reg = <0x72>;

			/* physical camera layer interface tags */
			devnode = "video3";
			type = "default";
			min_focus_distance = "10.0"; /* 1.0f/0.1f */
			hyper_focal = "0.2"; /* 1.0f/5.0f */
			focal_length = "4.73";
			f_number = "2.2";
			aperture = "2.2";
			support_mfi = "true";

			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					reg = <0>;
					lc898212_out1: endpoint {
						remote-endpoint = <&e3323_vi_in3>;
					};
				};
			};
		};
	};

	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			module0 {
				badge = "e3323_bottom_CH06P1";
				position = "bottom";
				orientation = "3";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/ov23850_a@10";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_focuser";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/lc898212@72";
				};
			};
			module1 {
				badge = "e3323_top_CH06P1";
				position = "top";
				orientation = "3";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@7000c000/ov23850_c@36";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_focuser";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/i2c@7000c000/lc898212@72";
				};
			};
		};
	};
};
