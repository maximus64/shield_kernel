/*
 * Copyright (c) 2015-2016, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

#define CAM_I2C_BUS	2
#define VI_I2C_BUS	6

/* generally used camera control gpio definitions and aliases*/
#define CAM_RST		TEGRA_GPIO(S, 4)
#define CAM_AF_EN	TEGRA_GPIO(S, 5)
#define CAM_FLASH_EN	TEGRA_GPIO(S, 6)
#define CAM_PWDN_RQ	TEGRA_GPIO(S, 7)
#define CAM_PWDN_FQ	TEGRA_GPIO(T, 0)
#define CAM_STROBE_EN	TEGRA_GPIO(T, 1)
/* alias */
#define CAM_PWDN_AF	CAM_AF_EN
#define CAMFI_PWDN	CAM_STROBE_EN
#define CAMRI_PWDN	CAM_STROBE_EN

/* specifically used on camera board designs */
/* NxOV10823 general */

#define OV10823_SID_CAM1	CAMRI_PWDN	/*PT1*/
#define OV10823_SID_CAM2	CAM_AF_EN	/*PS5*/
#define OV10823_SID_CAM3	CAM_PWDN_FQ	/*PT0*/

#define OV10823_DEFAULT_I2C_ADDR_SID_LOW	(0x10)
#define OV10823_DEFAULT_I2C_ADDR_SID_HIGH	(0x36)
#define OV10823_SENSOR_REG_RW_SID_LOW		(0x300c)
#define OV10823_SENSOR_REG_RW_SID_HIGH		(0x3661)

#define OV10823_I2C_ADDR_CAM1	(0x20)
#define OV10823_I2C_ADDR_CAM2	(0x22)
#define OV10823_I2C_ADDR_CAM3	(0x24)

/* ov10823 board specific */
#define OV10823_USE_OSC_FOR_MCLK	(1)
#define OV10823_NEED_I2C_RECOVERY	(0)

#define FIRST_CAM_POS (0)
#define SECOND_CAM_POS (1)
#define THIRD_CAM_POS (2)

/ {
	host1x {
		vi {
			num-channels = <2>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				port@0 {
					reg = <0>;
					vi_in0: endpoint {
						remote-endpoint = <&ov5693_out0>;
					};
				};
				port@1 {
					reg = <1>;
					vi_in1: endpoint {
						remote-endpoint = <&ov5693_out1>;
					};
				};
			};
		};

		i2c@546c0000 {
			status = "okay";
			#address-cells = <1>;
			#size-cells = <0>;
			ov5693_a@10 {
				compatible = "nvidia,ov5693";
				/* I2C device address */
				reg = <0x10>;

				/* V4L2 device node location */
				devnode = "video0";

				/* Physical dimensions of sensor */
				physical_w = "3.674";
				physical_h = "2.738";

				/* Sensor Model */
				sensor_model ="ov5693";

				/* Define any required hw resources needed by driver */
				/* ie. clocks, io pins, power sources */
				avdd-reg = "vana";
				iovdd-reg = "vif";

				/* Define any required hw resources needed by driver */
				/* ie. clocks, io pins, power sources */
				/* mclk-index indicates the index of the */
				/* mclk-name with in the clock-names array */

				clocks = <&tegra_car TEGRA210_CLK_ID_CLK_OUT_3>;
				clock-names = "mclk";
				clock-frequency = <24000000>;

				mclk = "cam_mclk1";
				pwdn-gpios = <&gpio CAM_PWDN_RQ GPIO_ACTIVE_HIGH>;
				vana-supply = <&max77620_ldo3>;
				vif-supply = <&en_vdd_cam>;

				/* Defines number of frames to be dropped by driver internally after applying */
				/* sensor crop settings. Some sensors send corrupt frames after applying */
				/* crop co-ordinates */
				post_crop_frame_drop = "0";

				/**
				* A modeX node is required to support v4l2 driver
				* implementation with NVIDIA camera software stack
				*
				* mclk_khz = "";
				* Standard MIPI driving clock, typically 24MHz
				*
				* num_lanes = "";
				* Number of lane channels sensor is programmed to output
				*
				* tegra_sinterface = "";
				* The base tegra serial interface lanes are connected to
				*
				* discontinuous_clk = "";
				* The sensor is programmed to use a discontinuous clock on MIPI lanes
				*
				* dpcm_enable = "true";
				* The sensor is programmed to use a DPCM modes
				*
				* cil_settletime = "";
				* MIPI lane settle time value.
				* A "0" value attempts to autocalibrate based on mclk_multiplier
				*
				*
				*
				*
				* active_w = "";
				* Pixel active region width
				*
				* active_h = "";
				* Pixel active region height
				*
				* pixel_t = "";
				* The sensor readout pixel pattern
				* For eg - 10 bit bayer having 'bggr' pixel pattern has value "bayer_bggr"
				*          12 bit bayer having 'bggr' pixel pattern has value "bayer_bggr12"
				*          14 bit bayer having 'bggr' pixel pattern has value "bayer_bggr14"
				*
				* readout_orientation = "0";
				* Based on camera module orientation.
				* Only change readout_orientation if you specifically
				* Program a different readout order for this mode
				*
				* line_length = "";
				* Pixel line length (width) for sensor mode.
				* This is used to calibrate features in our camera stack.
				*
				* mclk_multiplier = "";
				* Multiplier to MCLK to help time hardware capture sequence
				* TODO: Assign to PLL_Multiplier as well until fixed in core
				*
				* pix_clk_hz = "";
				* Sensor pixel clock used for calculations like exposure and framerate
				*
				*
				*
				*
				* inherent_gain = "";
				* Gain obtained inherently from mode (ie. pixel binning)
				*
				* min_gain_val = ""; (floor to 6 decimal places)
				* max_gain_val = ""; (floor to 6 decimal places)
				* Gain limits for mode
				*
				* min_exp_time = ""; (ceil to integer)
				* max_exp_time = ""; (ceil to integer)
				* Exposure Time limits for mode (us)
				*
				*
				* min_hdr_ratio = "";
				* max_hdr_ratio = "";
				* HDR Ratio limits for mode
				*
				* min_framerate = "";
				* max_framerate = "";
				* Framerate limits for mode (fps)
				*
				* embedded_metadata_height = "";
				* Sensor embedded metadata height in units of rows.
				* If sensor does not support embedded metadata value should be 0.
				*/
				mode0 { // OV5693_MODE_2592X1944
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "2592";
					active_h = "1944";
					pixel_t = "bayer_bggr";
					readout_orientation = "90";
					line_length = "2688";
					inherent_gain = "1";
					mclk_multiplier = "17.0";
					pix_clk_hz = "160000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1.816577";
					max_framerate = "30";
					min_exp_time = "34";
					max_exp_time = "550385";
					embedded_metadata_height = "0";
				};

				mode1 { //OV5693_MODE_2592X1458
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "2592";
					active_h = "1458";
					pixel_t = "bayer_bggr";
					readout_orientation = "90";
					line_length = "2688";
					inherent_gain = "1";
					mclk_multiplier = "17.0";
					pix_clk_hz = "160000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1.816577";
					max_framerate = "30";
					min_exp_time = "34";
					max_exp_time = "550385";
					embedded_metadata_height = "0";
				};

				mode2 { //OV5693_MODE_1280X720
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "1280";
					active_h = "720";
					pixel_t = "bayer_bggr";
					readout_orientation = "90";
					line_length = "1752";
					inherent_gain = "1";
					mclk_multiplier = "17.0";
					pix_clk_hz = "160000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "2.787078";
					max_framerate = "120";
					min_exp_time = "22";
					max_exp_time = "358733";
					embedded_metadata_height = "0";
				};

				// HDR Modes
				mode3 { //OV5693_MODE_2592X1944_HDR
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_a";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "2592";
					active_h = "1944";
					pixel_t = "hdr_bggr";
					readout_orientation = "90";
					line_length = "3696";
					inherent_gain = "1";
					mclk_multiplier = "19.0";
					pix_clk_hz = "176000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1.453262";
					max_framerate = "24";
					min_exp_time = "42";
					max_exp_time = "687981";
					embedded_metadata_height = "0";
				};

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						ov5693_out0: endpoint {
							csi-port = <0>;
							bus-width = <2>;
							remote-endpoint = <&vi_in0>;
						};
					};
				};
			};

			ov5693_c@36 {
				compatible = "nvidia,ov5693";
				/* I2C device address */
				reg = <0x36>;

				/* V4L2 device node location */
				devnode = "video1";

				/* Physical dimensions of sensor */
				physical_w = "3.674";
				physical_h = "2.738";

				/* Sensor Model */
				sensor_model ="ov5693";

				/* Define any required hw resources needed by driver */
				/* ie. clocks, io pins, power sources */
				avdd-reg = "vana";
				iovdd-reg = "vif";


				/* Define any required hw resources needed by driver */
				/* ie. clocks, io pins, power sources */
				/* mclk-index indicates the index of the */
				/* mclk-name with in the clock-names array */

				clocks = <&tegra_car TEGRA210_CLK_ID_CLK_OUT_3>;
				clock-names = "mclk";
				clock-frequency = <24000000>;

				mclk = "cam_mclk1";
				pwdn-gpios = <&gpio CAM_PWDN_FQ GPIO_ACTIVE_HIGH>;
				vana-supply = <&max77620_ldo3>;
				vif-supply = <&en_vdd_cam>;

				/* Defines number of frames to be dropped by driver internally after applying */
				/* sensor crop settings. Some sensors send corrupt frames after applying */
				/* crop co-ordinates */
				post_crop_frame_drop = "0";

				/**
				* A modeX node is required to support v4l2 driver
				* implementation with NVIDIA camera software stack
				*
				* mclk_khz = "";
				* Standard MIPI driving clock, typically 24MHz
				*
				* num_lanes = "";
				* Number of lane channels sensor is programmed to output
				*
				* tegra_sinterface = "";
				* The base tegra serial interface lanes are connected to
				*
				* discontinuous_clk = "";
				* The sensor is programmed to use a discontinuous clock on MIPI lanes
				*
				* dpcm_enable = "true";
				* The sensor is programmed to use a DPCM modes
				*
				* cil_settletime = "";
				* MIPI lane settle time value.
				* A "0" value attempts to autocalibrate based on mclk_multiplier
				*
				*
				*
				*
				* active_w = "";
				* Pixel active region width
				*
				* active_h = "";
				* Pixel active region height
				*
				* pixel_t = "";
				* The sensor readout pixel pattern
				* For eg - 10 bit bayer having 'bggr' pixel pattern has value "bayer_bggr"
				*          12 bit bayer having 'bggr' pixel pattern has value "bayer_bggr12"
				*          14 bit bayer having 'bggr' pixel pattern has value "bayer_bggr14"
				*
				* readout_orientation = "0";
				* Based on camera module orientation.
				* Only change readout_orientation if you specifically
				* Program a different readout order for this mode
				*
				* line_length = "";
				* Pixel line length (width) for sensor mode.
				* This is used to calibrate features in our camera stack.
				*
				* mclk_multiplier = "";
				* Multiplier to MCLK to help time hardware capture sequence
				* TODO: Assign to PLL_Multiplier as well until fixed in core
				*
				* pix_clk_hz = "";
				* Sensor pixel clock used for calculations like exposure and framerate
				*
				*
				*
				*
				* inherent_gain = "";
				* Gain obtained inherently from mode (ie. pixel binning)
				*
				* min_gain_val = ""; (floor to 6 decimal places)
				* max_gain_val = ""; (floor to 6 decimal places)
				* Gain limits for mode
				*
				* min_exp_time = ""; (ceil to integer)
				* max_exp_time = ""; (ceil to integer)
				* Exposure Time limits for mode (us)
				*
				*
				* min_hdr_ratio = "";
				* max_hdr_ratio = "";
				* HDR Ratio limits for mode
				*
				* min_framerate = "";
				* max_framerate = "";
				* Framerate limits for mode (fps)
				*
				* embedded_metadata_height = "";
				* Sensor embedded metadata height in units of rows.
				* If sensor does not support embedded metadata value should be 0.
				*/
				mode0 { // OV5693_MODE_2592X1944
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_c";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "2592";
					active_h = "1944";
					pixel_t = "bayer_bggr";
					readout_orientation = "90";
					line_length = "2688";
					inherent_gain = "1";
					mclk_multiplier = "6.67";
					pix_clk_hz = "160000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1.816577";
					max_framerate = "30";
					min_exp_time = "34";
					max_exp_time = "550385";
					embedded_metadata_height = "0";
				};

				mode1 { //OV5693_MODE_2592X1458
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_c";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "2592";
					active_h = "1458";
					pixel_t = "bayer_bggr";
					readout_orientation = "90";
					line_length = "2688";
					inherent_gain = "1";
					mclk_multiplier = "6.67";
					pix_clk_hz = "160000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1.816577";
					max_framerate = "30";
					min_exp_time = "34";
					max_exp_time = "550385";
				};

				mode2 { //OV5693_MODE_1280X720
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_c";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "1280";
					active_h = "720";
					pixel_t = "bayer_bggr";
					readout_orientation = "90";
					line_length = "1752";
					inherent_gain = "1";
					mclk_multiplier = "6.67";
					pix_clk_hz = "160000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "2.787078";
					max_framerate = "120";
					min_exp_time = "22";
					max_exp_time = "358733";
					embedded_metadata_height = "0";
				};

				// HDR Modes
				mode3 { //OV5693_MODE_2592X1944_HDR
					mclk_khz = "24000";
					num_lanes = "2";
					tegra_sinterface = "serial_c";
					discontinuous_clk = "no";
					dpcm_enable = "false";
					cil_settletime = "0";

					active_w = "2592";
					active_h = "1944";
					pixel_t = "hdr_bggr";
					readout_orientation = "90";
					line_length = "3696";
					inherent_gain = "1";
					mclk_multiplier = "7.33";
					pix_clk_hz = "176000000";

					min_gain_val = "1.0";
					max_gain_val = "16";
					min_hdr_ratio = "1";
					max_hdr_ratio = "64";
					min_framerate = "1.453262";
					max_framerate = "24";
					min_exp_time = "42";
					max_exp_time = "687981";
					embedded_metadata_height = "0";
				};

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						ov5693_out1: endpoint {
							csi-port = <2>;
							bus-width = <2>;
							remote-endpoint = <&vi_in1>;
						};
					};
				};
			};

		};
	};

	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			module0 {
				badge = "e2146_rear_BA519C";
				position = "rear";
				orientation = "1";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/ov5693_a@10";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_focuser_stub";
				};
				drivernode2 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "f_AD5823";
				};
			};
			module1 {
				badge = "e2146_front_P5V27C";
				position = "front";
				orientation = "3";
				drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/ov5693_c@36";
				};
				drivernode1 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_focuser_stub";
				};
			};
		};
	};

	camera-pcl {
		compatible = "nvidia,tegra210-camera", "simple-bus";
		configuration = <0xAA55AA55>;

		modules {
			module1: module1@modules {
				compatible = "sensor,rear";
				badge_info = "e2146_rear_BA519C";
			  focuser {
					profile = <&ad5823_1>;
					platformdata = "t210ref_ov5693_pdata";
				};
			};
			module2: module2@modules {
				compatible = "sensor,front";
				badge_info = "e2146_front_P5V27C";
			};

			module3: module3@modules {
				compatible = "sensor,rear";
				badge_info = "e2385_angle0_ov10823";

				sensor {
					profile = <&ov10823_A>;
					platformdata = "t210ref_ov10823A_pdata";
				};
			};

			module4: module4@modules {
				compatible = "sensor,rear";
				badge_info = "e2385_angle120_ov10823";

				sensor {
					profile = <&ov10823_B>;
					platformdata = "t210ref_ov10823B_pdata";
				};
			};

			module5: module5@modules {
				compatible = "sensor,rear";
				badge_info = "e2385_angle240_ov10823";

				sensor {
					profile = <&ov10823_C>;
					platformdata = "t210ref_ov10823C_pdata";
				};
			};
		};

		profiles {
			ov5693_1: ov5693@2_0010 {
				index = <1>;
				chipname = "pcl_OV5693";
				type = "sensor";
				guid = "s_OV5693";
				position = <0>;
				bustype = "i2c";
				busnum = <VI_I2C_BUS>;
				addr = <0x10>;
				datalen = <2>;
				pinmuxgrp = <0xFFFF>;
				gpios = <3>;
				regulators = "vana", "vif";
				clocks = "cam_mclk1";
				drivername = "ov5693";
				detect = <0x0002 0x300A 0xFFFF 0x5690>;
				devid = <0x5693>;
				poweron = <
					CAMERA_IND_CLK_SET(10000)
					CAMERA_GPIO_CLR(CAM_PWDN_RQ)
					CAMERA_WAITMS(1)
					CAMERA_REGULATOR_ON(0)
					CAMERA_REGULATOR_ON(1)
					CAMERA_WAITMS(1)
					CAMERA_GPIO_SET(CAM_PWDN_RQ)
					CAMERA_WAITMS(10)
					CAMERA_END
					>;
				poweroff = <
					CAMERA_IND_CLK_CLR
					CAMERA_GPIO_CLR(CAM_PWDN_RQ)
					CAMERA_WAITUS(10)
					CAMERA_REGULATOR_OFF(1)
					CAMERA_REGULATOR_OFF(0)
					CAMERA_END
					>;
				/* sensor capabilities */
				cap-version = <0x34340002>;
				cap-identifier = "OV5693";
				cap-sensor_nvc_interface = <3>;
				cap-pixel_types = <0x2101>;
				cap-orientation = <1>;
				cap-direction = <0>;
				cap-initial_clock_rate_khz = <6000>;
				cap-h_sync_edge = <0>;
				cap-v_sync_edge = <0>;
				cap-mclk_on_vgp0 = <0>;
				cap-csi_port = <0>;
				cap-data_lanes = <2>;
				cap-virtual_channel_id = <0>;
				cap-discontinuous_clk_mode = <1>;
				cap-cil_threshold_settle = <0>;
				cap-min_blank_time_width = <16>;
				cap-min_blank_time_height = <16>;
				cap-preferred_mode_index = <0>;
				cap-external_clock_khz_0 = <24000>;
				cap-clock_multiplier_0 = <8000000>;
				cap-external_clock_khz_1 = <0>;
				cap-clock_multiplier_1 = <0>;
				cap-hdr-enabled;
			};
			ad5823_1: ad5823@2_000c {
				index = <2>;
				chipname = "pcl_AD5823";
				type = "focuser";
				guid = "f_AD5823";
				position = <0>;
				bustype = "i2c";
				busnum = <VI_I2C_BUS>;
				addr = <0xc>;
				datalen = <1>;
				pinmuxgrp = <0xFFFF>;
				gpios = <3>;
				regulators = "vdd", "vif";
				drivername = "ad5823";
				detect = <0x0002 0x0006 0xFFFF 0x0010>;
				devid = <0x5823>;
				poweron = <
					CAMERA_REGULATOR_ON(1)
					CAMERA_REGULATOR_ON(0)
					CAMERA_WAITUS(10)
					CAMERA_GPIO_SET(CAM_PWDN_AF)
					CAMERA_WAITUS(10)
					CAMERA_END
					>;
				poweroff = <
					CAMERA_REGULATOR_OFF(0)
					CAMERA_REGULATOR_OFF(1)
					CAMERA_GPIO_CLR(CAM_PWDN_AF)
					CAMERA_WAITUS(10)
					CAMERA_END
					>;
			};
			ov5693_2: ov5693@2_0036 {
				index = <3>;
				chipname = "pcl_OV5693f";
				type = "sensor";
				guid = "sOV5693f";
				position = <1>;
				bustype = "i2c";
				busnum = <VI_I2C_BUS>;
				addr = <0x36>;
				datalen = <2>;
				pinmuxgrp = <0xFFFF>;
				gpios = <3>;
				regulators = "vana", "vif";
				clocks = "cam_mclk1";
				drivername = "ov5693.1";
				detect = <0x0002 0x300A 0xFFFF 0x5690>;
				devid = <0x5693>;
				poweron = <
					CAMERA_IND_CLK_SET(10000)
					CAMERA_GPIO_CLR(CAM_PWDN_FQ)
					CAMERA_WAITMS(1)
					CAMERA_REGULATOR_ON(0)
					CAMERA_REGULATOR_ON(1)
					CAMERA_WAITMS(1)
					CAMERA_GPIO_SET(CAM_PWDN_FQ)
					CAMERA_WAITMS(10)
					CAMERA_END
					>;
				poweroff = <
					CAMERA_IND_CLK_CLR
					CAMERA_GPIO_CLR(CAM_PWDN_FQ)
					CAMERA_WAITUS(10)
					CAMERA_REGULATOR_OFF(1)
					CAMERA_REGULATOR_OFF(0)
					CAMERA_END
					>;
				/* sensor capabilities */
				cap-version = <0x34340002>;
				cap-identifier = "OV5693.1";
				cap-sensor_nvc_interface = <5>;
				cap-pixel_types = <0x2101>;
				cap-orientation = <3>;
				cap-direction = <1>;
				cap-initial_clock_rate_khz = <6000>;
				cap-h_sync_edge = <0>;
				cap-v_sync_edge = <0>;
				cap-mclk_on_vgp0 = <0>;
				cap-csi_port = <1>;
				cap-data_lanes = <2>;
				cap-virtual_channel_id = <0>;
				cap-discontinuous_clk_mode = <1>;
				cap-cil_threshold_settle = <0>;
				cap-min_blank_time_width = <16>;
				cap-min_blank_time_height = <16>;
				cap-preferred_mode_index = <0>;
				cap-external_clock_khz_0 = <24000>;
				cap-clock_multiplier_0 = <8000000>;
				cap-external_clock_khz_1 = <0>;
				cap-clock_multiplier_1 = <0>;
				cap-hdr-enabled;
			};

			ov10823_A: ov10823@6_0020 {
				index = <4>;
				chipname = "pcl_OV10823_A";
				type = "sensor";
				guid = "sOVA823A";
				position = <FIRST_CAM_POS>;
				bustype = "i2c";
				busnum = <VI_I2C_BUS>;
				addr = <OV10823_I2C_ADDR_CAM1>;
				datalen = <2>;
				pinmuxgrp = <0xFFFF>;
				gpios = <3>;
				drivername = "ov10823";
				detect = <0x0002 0x300A 0xFFFF 0xA820>;
				devid = <0xA823>;
				poweron = <
					CAMERA_GPIO_SET(OV10823_SID_CAM1)
					CAMERA_GPIO_SET(OV10823_SID_CAM2)
					CAMERA_GPIO_SET(OV10823_SID_CAM3)
					CAMERA_WAITUS(10)
					CAMERA_GPIO_CLR(OV10823_SID_CAM1)
					CAMERA_WAITUS(300)
					CAMERA_TABLE_RAW_WRITE(CAMERA_RAW_I2C_ADDRESS(\
						OV10823_DEFAULT_I2C_ADDR_SID_LOW, \
						OV10823_SENSOR_REG_RW_SID_LOW, \
						(OV10823_I2C_ADDR_CAM1 << 1)))
					CAMERA_END
					>;
				poweroff = <
					CAMERA_END
					>;
			};

			ov10823_B: ov10823@6_0022 {
				index = <4>;
				chipname = "pcl_OV10823_B";
				type = "sensor";
				guid = "sOVA823B";
				position = <SECOND_CAM_POS>;
				bustype = "i2c";
				busnum = <VI_I2C_BUS>;
				addr = <OV10823_I2C_ADDR_CAM2>;
				datalen = <2>;
				pinmuxgrp = <0xFFFF>;
				gpios = <3>;
				drivername = "ov10823";
				detect = <0x0002 0x300A 0xFFFF 0xA820>;
				devid = <0xA823>;
				poweron = <
					CAMERA_GPIO_CLR(OV10823_SID_CAM2)
					CAMERA_WAITUS(300)
					CAMERA_TABLE_RAW_WRITE(CAMERA_RAW_I2C_ADDRESS(\
						OV10823_DEFAULT_I2C_ADDR_SID_LOW, \
						OV10823_SENSOR_REG_RW_SID_LOW, \
						(OV10823_I2C_ADDR_CAM2 << 1)))
					CAMERA_END
					>;
				poweroff = <
					CAMERA_END
					>;
			};

			ov10823_C: ov10823@6_0024 {
				index = <4>;
				chipname = "pcl_OV10823_C";
				type = "sensor";
				guid = "sOVA823C";
				position = <THIRD_CAM_POS>;
				bustype = "i2c";
				busnum = <VI_I2C_BUS>;
				addr = <OV10823_I2C_ADDR_CAM3>;
				datalen = <2>;
				pinmuxgrp = <0xFFFF>;
				gpios = <3>;
				drivername = "ov10823";
				detect = <0x0002 0x300A 0xFFFF 0xA820>;
				devid = <0xA823>;
				poweron = <
					CAMERA_GPIO_CLR(OV10823_SID_CAM3)
					CAMERA_WAITUS(300)
					CAMERA_TABLE_RAW_WRITE(CAMERA_RAW_I2C_ADDRESS(\
						OV10823_DEFAULT_I2C_ADDR_SID_LOW, \
						OV10823_SENSOR_REG_RW_SID_LOW, \
						(OV10823_I2C_ADDR_CAM3 << 1)))
					CAMERA_END
					>;
				poweroff = <
					CAMERA_END
					>;
			};

		};
	};
};
